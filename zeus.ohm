Zeus {
    File = (ImportDef
      | ServiceDef
      | StructDef
      | GlobalOptionDef
      | EnumDef )*
      
    
    ImportDef
      = "import" String 
    
    OptionDef
      = "@" optionident ("(" Value ")")? 
      
    GlobalOptionDef = OptionDef ";"
   
    EnumDef
      = OptionDef* "enum" ident "{" (EnumField ";")* "}"

    EnumField
      = OptionDef* ident "=" digit+
  
    MethodDef 
      = OptionDef* ident "{" ("request" "{"  StructBody "}")?  ( "return" "{" StructBody "}")?  "}" 

    StructDef
      = OptionDef* "struct" ident "{" StructBody "}"

    StructBody
      = (StructField ";")* 
    StructField
      = OptionDef* type ident

    ServiceDef
      = OptionDef* "service" ident "{"  ServiceBody "}"
   
   ServiceBody
      = MethodDef* 
 
comment = "/*" (~"*/" any)* "*/" --multiline
| "//" (~"\n" any)*  --single

space += comment


 
    ident  (an identifier)
      = letter alnum*

    optionident  (an identifier)
      = letter (alnum | "." | "_" | "-")*
    
    type = letter (alnum | "[]")*


  Value =
    Object
    | Array
    | String
    | Number
    | True
    | False
    | Null

  Object =
    "{" "}" -- empty
    | "{" Pair ("," Pair)* "}" -- nonEmpty

  Pair =
    String ":" Value

  Array =
    "[" "]" -- empty
    | "[" Value ("," Value)* "]" -- nonEmpty

  String (String) =
    stringLiteral

  stringLiteral =
    "\"" doubleStringCharacter* "\""

  doubleStringCharacter (character) =
    ~("\"" | "\\") any -- nonEscaped
    | "\\" escapeSequence -- escaped

  escapeSequence =
    "\"" -- doubleQuote
    | "\\" -- reverseSolidus
    | "/" -- solidus
    | "b" -- backspace
    | "f" -- formfeed
    | "n" -- newline
    | "r" -- carriageReturn
    | "t" -- horizontalTab
    | "u" fourHexDigits -- codePoint

  fourHexDigits = hexDigit hexDigit hexDigit hexDigit

  Number (Number) =
    numberLiteral

  numberLiteral =
    decimal exponent -- withExponent
    | decimal -- withoutExponent

  decimal =
    wholeNumber "." digit+ -- withFract
    | wholeNumber -- withoutFract

  wholeNumber =
    "-" unsignedWholeNumber -- negative
    | unsignedWholeNumber -- nonNegative

  unsignedWholeNumber =
    "0" -- zero
    | nonZeroDigit digit* -- nonZero

  nonZeroDigit = "1".."9"

  exponent =
    exponentMark ("+"|"-") digit+ -- signed
    | exponentMark digit+ -- unsigned

  exponentMark = "e" | "E"

  True = "true"
  False = "false"
  Null = "null"
 }
input UserChangeInput  {
  name: String
  profile: UserProfileInput
}
input UserProfileInput  {
  name: String
  email: String
  type: UserType
}

enum GeneralObjectStatus {
  Active
  Deleted 
}
type GeneralObjectMeta  {
  id: String
  userId: String
  typeId: String
  status: GeneralObjectStatus
  updatedAt: Utc
  createdAt: Utc
}

type JwtUser  {
  id: String
  email: String
  org: String
}


enum UserType {
  Normal
  Admin 
}
type User  {
  tags: [String]
  profile: UserProfile
  meta: GeneralObjectMeta
}

type UserProfile  {
  name: String
  email: String
  type: UserType
}

type BaseRequest  {
  user: JwtUser
}

type UserChange  {
  name: String
  profile: UserProfile
}

type CreateUserResponse  {
  user: User
}

input CreateUserRequest  {
  id: Int
  user: UserChangeInput
}

type GetUserResponse  {
  user: User
}

input GetUserRequest  {
  id: Int
}

type MeResponse  {
  user: User
}


type Query {
  getUser(request: GetUserRequest): GetUserResponse
  me: MeResponse
}

type Mutation {
  createUser(request: CreateUserRequest): CreateUserResponse
}

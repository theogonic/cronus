type User @key(fields: "id") {
  avatarUrl: String
  name: String
  phones: [TypedPhone]
  desc: String
  addrs: [TypedAddress]
  onboarded: Boolean
  fvrActIds: [String]
  fvrCatIds: [String]
  ethnicity: String
  occupation: String
  careerLevel: String
  id: ID!
  favoriteActivities: [Activity]
}

type GetUserResponse  {
  user: User
}

input GetUserRequest  {
  userId: String
}

type UpdateUserResponse  {
  user: User
}

input UpdateUserRequest  {
  id: String
  user: UserChangeInput
}

type AddFvrActResponse  {
  activityId: String
}

input AddFvrActRequest  {
  activityId: String
}

type DelFvrActResponse  {
  activityId: String
}

input DelFvrActRequest  {
  activityId: String
}


type Query {
  getUser(request: GetUserRequest): GetUserResponse
}

type Mutation {
  updateUser(request: UpdateUserRequest): UpdateUserResponse
  addFvrAct(request: AddFvrActRequest): AddFvrActResponse
  delFvrAct(request: DelFvrActRequest): DelFvrActResponse
}
